How to use ?

----------------------------------------------------------------------------

SQL : SELECT id, name FROM users;
C# : new SqlQueryBuilder()
    .Select("id", "name")
    .From("users")
    .Build();

---------------------------    [ WHERE ]   -------------------------------------------------

SQL : SELECT id, name FROM users WHERE age > 18 AND status = 'active';
C# : new SqlQueryBuilder()
    .Select("id", "name")
    .From("users")
    .Where("age > 18")
    .Where("status = 'active'")
    .Build();

--------------------------   [ ORDER BY ]   --------------------------------------------------

SQL : SELECT id, name FROM users ORDER BY name DESC;
new SqlQueryBuilder()
    .Select("id", "name")
    .From("users")
    .OrderBy("name", descending: true)
    .Build();

----------------------------  [ LIMIT & OFFSET ] ------------------------------------------------


SQL : SELECT id, name FROM users ORDER BY id ASC LIMIT 10 OFFSET 20;
C# : new SqlQueryBuilder()
    .Select("id", "name")
    .From("users")
    .OrderBy("id")
    .Limit(10)
    .Offset(20)
    .Build();
     
-------------------------   [ DISTINCT ]   ---------------------------------------------------

SQL : SELECT DISTINCT name FROM users;
C# : new SqlQueryBuilder()
    .Select("name")
    .Distinct()
    .From("users")
    .Build();

-------------------------------  [ INNER, LEFT, RIGHT, FULL ]  ---------------------------------------------

SQL : SELECT users.id, users.name, orders.amount FROM users INNER JOIN orders ON users.id = orders.user_id;
C# : new SqlQueryBuilder()
    .Select("users.id", "users.name", "orders.amount")
    .From("users")
    .Join("orders", "users.id = orders.user_id")
    .Build();


SQL : SELECT users.id, users.name, orders.amount FROM users LEFT JOIN orders ON users.id = orders.user_id;
C# : new SqlQueryBuilder()
    .Select("users.id", "users.name", "orders.amount")
    .From("users")
    .LeftJoin("orders", "users.id = orders.user_id")
    .Build();

---------------------------------- [ GROUP BY and HAVING ] ----------------------------------------

SQL : SELECT category, COUNT(*) AS total FROM products GROUP BY category HAVING COUNT(*) > 5;
C# : new SqlQueryBuilder()
    .Select("category", "COUNT(*) AS total")
    .From("products")
    .GroupBy("category")
    .Having("COUNT(*) > 5")
    .Build();

------------------------------   [ UNION ] ----------------------------------------------

SQL : SELECT id, name FROM users WHERE status = 'active' UNION SELECT id, name FROM admins WHERE status = 'active';

C# :
var query1 = new SqlQueryBuilder()
    .Select("id", "name")
    .From("users")
    .Where("status = 'active'");

var query2 = new SqlQueryBuilder()
    .Select("id", "name")
    .From("admins")
    .Where("status = 'active'");

var unionQuery = query1.Union(query2).Build();

---------------------------   [ UNION ALL ]  -------------------------------------------------

SQL : SELECT id, name FROM users WHERE status = 'active' UNION ALL SELECT id, name FROM admins WHERE status = 'active';
var unionAllQuery = query1.Union(query2, all: true).Build();

----------------------------------------------------------------------------

SELECT DISTINCT users.id, users.name, SUM(orders.amount) AS total_spent
FROM users
LEFT JOIN orders ON users.id = orders.user_id
WHERE users.status = 'active'
GROUP BY users.id, users.name
HAVING SUM(orders.amount) > 100
ORDER BY total_spent DESC
LIMIT 10
OFFSET 5;

var query = new SqlQueryBuilder()
    .Select("users.id", "users.name", "SUM(orders.amount) AS total_spent")
    .Distinct()
    .From("users")
    .LeftJoin("orders", "users.id = orders.user_id")
    .Where("users.status = 'active'")
    .GroupBy("users.id", "users.name")
    .Having("SUM(orders.amount) > 100")
    .OrderBy("total_spent", descending: true)
    .Limit(10)
    .Offset(5)
    .Build();